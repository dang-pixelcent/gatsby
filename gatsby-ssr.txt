const React = require('react');
const parse = require('html-react-parser').default || require('html-react-parser');
const path = require('path');
const getTerminalColors = require('./src/utils/terminalColors.js');

// Lấy màu sắc từ utils để sử dụng trong console log
const color = getTerminalColors();

// Đường dẫn đến thư mục cache và file chứa tracking codes
const CACHE_DIR = '.cache';
const GLOBAL_SNIPPETS_FILE = 'global-html-snippets.json';
const PAGE_SNIPPETS_DIR = 'page-snippets'; // Thư mục chứa các snippet riêng của từng trang

/** 1.
 * Hàm helper để đọc một file JSON từ cache một cách an toàn.
 * @param {string} filePath - Đường dẫn đầy đủ đến file cache.
 * @returns {object} - Dữ liệu JSON đã parse hoặc object rỗng.
 */
const readJsonCache = (filePath) => {
  const fs = eval('require')('fs');
  try {
    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, 'utf-8');
      console.log(`${color.cyan}[gatsby-ssr] Successfully loaded cache from ${filePath}${color.reset}`);
      const data = JSON.parse(fileContent);
      return data;
    }
    console.info(`${color.yellow}[gatsby-ssr] Cache file ${filePath} not found - this is normal for first build or if cache was cleared.${color.reset}`);
  } catch (error) {
    console.error(`${color.red}[gatsby-ssr] Error reading cache file ${filePath}:`, error);
  }
  return { headerHtml: '', bodyOpenHtml: '', footerHtml: '' }; // Luôn trả về object rỗng để tránh lỗi
};


export const onRenderBody = ({
  pathname, // Đường dẫn hiện tại của trang render
  setHeadComponents,
  setPreBodyComponents,
  setPostBodyComponents,
  setBodyAttributes,
}, pluginOptions) => {

  // ============ADD CLASS FOR BODY================
  setBodyAttributes({
    // className: "ast-theme-transparent-header", //lazyloaded menu-fixed
    // className: "wp-singular page-template page-template-template-service-category page-template-template-service-category-php page page-id-3432 wp-custom-logo wp-theme-astra wp-child-theme-agencymarketing mega-menu-primary ast-plain-container ast-no-sidebar astra-4.11.1 ast-single-post ast-inherit-site-logo-transparent ast-theme-transparent-header ast-hfb-header ast-sticky-main-shrink ast-sticky-above-shrink ast-sticky-below-shrink ast-sticky-header-shrink ast-inherit-site-logo-sticky ast-primary-sticky-enabled ast-normal-title-enabled astra-addon-4.11.0 ast-header-break-point",
    style: {}
  });
  // ============================

  // Đọc snippet riêng của trang từ cache
  const slug = pathname.replace(/\//g, '') || 'homepage'; // Thay thế dấu '/' bằng rỗng, nếu pathname là '/', sử dụng 'homePage' làm slug
  const pageSnippetsPath = path.join(process.cwd(), CACHE_DIR, PAGE_SNIPPETS_DIR, `${slug}.json`);
  const pageSnippets = readJsonCache(pageSnippetsPath);

  // global tracking codes
  const globalSnippetsPath = path.join(process.cwd(), CACHE_DIR, GLOBAL_SNIPPETS_FILE);
  const globalSnippets = readJsonCache(globalSnippetsPath);

  const allSnippets = {
    head: (globalSnippets.headerHtml || '') + (pageSnippets.headerHtml || ''),
    bodyOpen: (globalSnippets.bodyOpenHtml || '') + (pageSnippets.bodyOpenHtml || ''),
    bodyClose: (globalSnippets.footerHtml || '') + (pageSnippets.footerHtml || ''),
  }

  const scriptsJsonString = JSON.stringify(allSnippets);

  const dataScript = (
    <script
      key="delayed-scripts-data"
      dangerouslySetInnerHTML={{
        __html: `window.__DELAYED_SCRIPTS__ = ${scriptsJsonString};`,
      }}
    />
  );

  if (allSnippets.head) {
    setHeadComponents([
      <meta key="delayed-head-placeholder" name="delayed-head-placeholder" />,
    ]);
  }
  if (allSnippets.bodyOpen) {
    setPreBodyComponents([
      <div key="delayed-body-open-placeholder" id="delayed-body-open-placeholder" style={{ display: 'none' }} />,
    ]);
  }

  const postBodyItems = [];
  if (allSnippets.bodyClose) {
    postBodyItems.push(
      <div key="delayed-body-close-placeholder" id="delayed-body-close-placeholder" style={{ display: 'none' }} />
    );
  }

  // Luôn thêm thẻ script data vào cuối body để nó được load sau cùng
  postBodyItems.push(dataScript);
  setPostBodyComponents(postBodyItems);


  // const scriptsForHeadString_fromHeadField = (globalSnippets.headerHtml || '') + (pageSnippets.headerHtml || '');
  // const scriptsForPreBodyString_fromBodyField = (globalSnippets.bodyOpenHtml || '') + (pageSnippets.bodyOpenHtml || '');
  // const scriptsForPreBodyString_fromFooterField = (globalSnippets.footerHtml || '') + (pageSnippets.footerHtml || '');

};