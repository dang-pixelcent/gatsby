import { GraphQLClient, gql } from 'graphql-request';

// L·∫•y URL c·ªßa GraphQL endpoint t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const endpoint = process.env.REACT_APP_WPGRAPHQL_URL;

// T·∫°o m·ªôt GraphQL client
const client = new GraphQLClient(endpoint);

// ƒê·ªãnh nghƒ©a mutation GraphQL m√† b·∫°n ƒë√£ cung c·∫•p
const SUBMIT_FORM_MUTATION = gql`
  mutation Submit($input: SubmitScheduleFormInput!) {
    submitScheduleForm(input: $input) {
      success
      submissionId
      qualified
      finalPage
      score
      errors
      answersById
    }
  }
`;

/**
 * Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi t·ª´ { questionId: "answer text" }
 * sang ƒë·ªãnh d·∫°ng API y√™u c·∫ßu: { questionId: { answers: [{ label: "...", value: "..."}] } }
 * @param {object} answers - ƒê·ªëi t∆∞·ª£ng c√¢u tr·∫£ l·ªùi t·ª´ state c·ªßa Quiz.
 * @returns {object} - ƒê·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi.
 */
const transformAnswersForApi = (answers) => {
    const transformed = {};
    for (const questionId in answers) {
        const answerText = answers[questionId];
        // API y√™u c·∫ßu m·ªôt ƒë·ªãnh d·∫°ng c·ª• th·ªÉ, ch√∫ng ta t·∫°o n√≥ ·ªü ƒë√¢y.
        // Hi·ªán t·∫°i, label v√† value c√≥ th·ªÉ gi·ªëng nhau.
        transformed[questionId] = {
            answers: [{ label: answerText, value: answerText }]
        };
    }
    // B·ªï sung tr∆∞·ªùng state ƒë·ªÉ testing
    transformed.state = {
        answers: [{ label: "Allowed", value: "Allowed" }]
    };
    return transformed;
};


/**
 * G·ª≠i d·ªØ li·ªáu quiz ƒë·∫øn backend.
 * @param {object} answers - ƒê·ªëi t∆∞·ª£ng ch·ª©a c√°c c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng.
 * @returns {Promise<object>} - Promise ch·ª©a d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ server.
 */
export const submitQuizAnswers = async (answers) => {
    const answersById = transformAnswersForApi(answers);

    // D·ªØ li·ªáu li√™n h·ªá m·∫´u. Sau n√†y b·∫°n s·∫Ω l·∫•y t·ª´ m·ªôt form kh√°c.
    const contactInfo = {
        name: "Quiz Taker",
        email: "user@example.com"
    };

    const variables = {
        input: {
            formKey: "schedule_form", // Gi·ªëng nh∆∞ trong v√≠ d·ª• c·ªßa b·∫°n
            answersById: answersById,
            // API y√™u c·∫ßu contact l√† m·ªôt chu·ªói JSON
            contact: JSON.stringify(contactInfo)
        }
    };

    try {
        console.log("üöÄ Sending GraphQL Mutation with variables:", variables);
        const data = await client.request(SUBMIT_FORM_MUTATION, variables);
        console.log("‚úÖ GraphQL Mutation Success:", data);
        return data.submitScheduleForm;
    } catch (error) {
        console.error("‚ùå GraphQL Mutation Failed:", error);
        // N√©m l·ªói ƒë·ªÉ component c√≥ th·ªÉ b·∫Øt v√† x·ª≠ l√Ω
        throw error;
    }
};